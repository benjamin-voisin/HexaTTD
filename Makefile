NAME = hexattd
CXX = g++ --std=c++20 

BUILD_DIR ?= ./build# Default build directory ./build, but modifiable

# Don't forget to add a directory here when making one for sources
VPATH = ./src:./src/track_graph:./src/graphics/:$(BUILD_DIR)

RAYLIB_DIR ?= ./raylib/src/#Path to raylib source code
RAYGUI_DIR ?= ./raygui/src/#Path to raygui source code


# This allows the preprocessor to also generate the dependencies in the *.d files
CPPFLAGS += -MP -MD

# Our compile flags, with etra warning
CXXFLAGS = -Wall -Wextra -I$(RAYLIB_DIR) -I$(RAYGUI_DIR)
DEBUGFLAGS = -g3 -fsanitize=address
RELEASEFLAGS = -flto -O3 -DNDEBUG

MODE ?= RELEASE# Default is Release

# Raylib has some warnings that we donâ€™t want to see when compiling in debug
CUSTOM_CFLAGS = -Wno-unused-result -Wno-unused-but-set-variable

# Allow usage of mold linker for faster build time, default to false
USE_MOLD_LINKER ?= FALSE
ifeq ($(USE_MOLD_LINKER), TRUE)
	LDFLAGS += -fuse-ld=mold
endif

ifeq ($(MODE),DEBUG) # Debug mode puts address sanitizer and debug info
	CXXFLAGS += $(DEBUGFLAGS)
	CUSTOM_CFLAGS += $(DEBUGFLAGS) # we add our flags to raylib
else # Release mode compile in -O3 with link time optimization
	CXXFLAGS += $(RELEASEFLAGS)
	CUSTOM_CFLAGS += $(RELEASEFLAGS) # we add our flags to raylib
endif

# This part allows us to print progress of the compilation
ifndef ECHO
# We ask `make` for the amount of tasks that we will do
T := $(shell $(MAKE) $(MAKECMDGOALS) --no-print-directory \
      -nrRf $(firstword $(MAKEFILE_LIST)) \
      ECHO="COUNTTHIS" | grep -c "COUNTTHIS")
# N will containt x n times, with n being the number of completed jobs
N := x
# with each call to c, we add an x to N
C = $(words $N)$(eval N := x $N)
ECHO = echo -e "[$(C)/$(T)]" # -e allows us to print color
endif

VERBOSE ?= FALSE

default: $(NAME)

# for raylib
RAYLIB_RELEASE_PATH = $(CURDIR)/$(BUILD_DIR)
LIBRAYLIB = $(BUILD_DIR)/libraylib.a
export CUSTOM_CFLAGS
export RAYLIB_RELEASE_PATH

# Here we get all the source files and define our objects and makefiles associated
TEST_FILE = test.cpp
SOURCES = $(notdir $(wildcard ./src/*.cpp ./src/track_graph/*.cpp ./src/graphics/*.cpp))
OBJECTS = $(addprefix $(BUILD_DIR)/, $(SOURCES:%.cpp=%.o))
MAKEFILES = $(OBJECTS:%.o=%.d)

# We include the autogenerated dependencies
-include $(MAKEFILES)

# The main rules to build our projects, either verbosly or not
ifeq ($(VERBOSE),FALSE)
$(NAME): $(OBJECTS) $(LIBRAYLIB)
	@$(ECHO) "\033[32mBuilding executable $@ in $(MODE) mode\033[0m"
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^

$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(BUILD_DIR)
	@$(ECHO) "\033[32mBuilding CXX object $@ in $(MODE) mode\033[0m"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
else
$(NAME): $(OBJECTS) $(LIBRAYLIB)
	@$(ECHO) "\033[32m$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^\033[0m"
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^

$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(BUILD_DIR)
	@$(ECHO) "\033[32m$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<\033[0m"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
endif

$(LIBRAYLIB):
	@mkdir -p $(BUILD_DIR)
	@$(ECHO) "\033[32mBuilding raylib static lib in $(MODE) mode, this job is longer than others...\033[0m"
	@$(MAKE) -C $(RAYLIB_DIR)

test: $(BUILD_DIR)/test
	@./$^

$(BUILD_DIR)/test: $(filter-out $(BUILD_DIR)/main.o,$(OBJECTS)) $(LIBRAYLIB)
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -DTEST -c -o $(BUILD_DIR)/test.o src/$(TEST_FILE)
	@$(ECHO) "\033[32mBuilding unit test executable\033[0m"
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^
	@$(RM) $(BUILD_DIR)/test.o

clean: clean_hex

cleanall : clean clean_raylib

clean_hex:
	$(RM) $(NAME)
	$(RM) $(OBJECTS)
	$(RM) $(MAKEFILES)
	$(RM) $(LIBRAYLIB)
	$(RM) $(BUILD_DIR)/test
	$(RM) $(BUILD_DIR)/test.o
	$(RM) $(BUILD_DIR)/test.d
	$(RM) --dir $(BUILD_DIR)

clean_raylib:
	$(MAKE) clean -C $(RAYLIB_DIR)

.PHONY: clean cleanall clean_hex clean_raylib test
